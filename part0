0.4
  
  browser->server: HTTP POST https://fullstack-exampleapp.herokuapp.com/new_note
  server->browser: URL REDIRECT /notes
  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/notes
  server-->browser: HTML-code
  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.css
  server-->browser: main.css
  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.js
  server-->browser: main.js

  note over browser:
  browser starts executing js-code
  that requests JSON data from server 
  end note

  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/data.json
  server-->browser: [{ content: "HTML is easy", date: "2019-05-23" }, ...]

  note over browser:
  browser executes the event handler
  that renders notes to display
  end note
  
0.5

  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/spa
  server-->browser: HTML-code
  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/main.css
  server-->browser: main.css
  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/spa.js
  server-->browser: spa.js

  Note:
  browser starts executing js-code
  that requests JSON data from server 
  end note

  browser->server: HTTP GET https://fullstack-exampleapp.herokuapp.com/data.json
  server-->browser: [{ content: "HTML is easy", date: "2019-05-23" }, ...]

  Note:
  browser executes the event handler
  that renders notes to display
  end note
  
0.6
  
  Note:
  spa.js locates notes_form element and registers an onClick
  event handler.  User submits new note, and spa.js prevents default HTTP POST.
  Handler creates a new note, renders on page, and sends new note to server.
  
  browser->server: HTTP POST https://fullstack-exampleapp.herokuapp.com/new_note_spa
  server->browser: JSON
  
  Note:
  Server parses JSON sent from browser
  that contains note and timestamp, then
  responds with updated JSON.
  
